continue
short_url
continue
title
continue
short_url
continue
short_url
continue
@short_url
continue
@short_url
continue
short_url
continue
short_url
continue
short_url
continue
short_url
continue
short_url
continue
short_url
continue
shot_url
continue
shot_url
continue
shot_url
short_url
continue
self
continue
exit
continue
self
continue
contineu
exit
continue
exit
  expect(parsed_response['urls']).to be_include(short_url.public_attributes)
exit
parsed_response
exit
@urls = ShortUrl.order('click_count DESC').select('id', 'full_url', 'title', 'click_count', 'short_code').first(100)
    @urls = ShortUrl.order('click_count DESC').select(:id).first(100)
    @urls = ShortUrl.order('click_count DESC').slecet(:id).first(100)
    @urls = ShortUrl.order('click_count DESC').first(100)
self.attributes.slice('id', 'full_url', 'title', 'click_count', 'short_code')
ShortUrl.order('click_count DESC').first(100).select('id', 'full_url', 'title', 'click_count', 'short_code')
ShortUrl.order('click_count DESC').select('id', 'full_url', 'title', 'click_count', 'short_code')
ShortUrl.order('click_count DESC').('id', 'full_url', 'title', 'click_count', 'short_code').first(100)
    @urls = ShortUrl.order('click_count DESC').('id', 'full_url', 'title', 'click_count', 'short_code').first(100)
ShortUrl.order('click_count DESC').select('id', 'full_url', 'title', 'click_count', 'short_code')
parsed_response['urls']
exit
self.attributes.slice('id', 'full_url', 'title', 'click_count', 'short_code')exit
self.attributes.slice('id', 'full_url', 'title', 'click_count', 'short_code')
self.attributes.slice('id')
self.attributes..slice('id')
self.attributes
self
self.params
 self.connection.select_all("select id, name, username from users")
self.connection.select(:id)
self.attributes.permit(:id)
self.attributes
self.attr
self
self.require(:short_url)
self
paramsself
params
self.permit(:id, :full_url, :title, :click_count, :short_code)
exit
short_url.public_attributes
exit
short_url.permit(:id, :full_url, :title, :click_count, :short_code)
short_url.public_attributes
exit
self
short_url.public_attributes
exit
short_url.public_attributes
exit
short_url.public_attributes
short_url.permit(:id, :full_url, :title, :click_count, :short_code)
short_url.public_attributes
exit
short_url.public_attributes
exit
short_url.public_attributes
continue
short_url
short_url.params
short_url.public_attributes
continue
short_url.short_url_params
short_url.public_attributes
continue
@urls.short_url_params
    @urls = ShortUrl.order('click_count DESC').first(100)
exit
@urls.params
params
 @urls
    @urls = ShortUrl.order('click_count DESC').first(100)
 @urls    @urls = ShortUrl.order('click_count DESC').first(100)
 @urls
params
exit
      expect(parsed_response['urls'][0]['full_url']).to eq(short_url.full_url)
      expect(parsed_response['urls'][0]).to eq(short_url.public_url)
      expect(parsed_response['urls'][0]).to eq(short_url.public_urls)
short_url.full_url
short_url
t =parsed_response['urls'][0]['full_url']
parsed_response['urls'][0]['full_url']
parsed_response['urls'][0]
parsed_response['urls']
parsed_response['urls']['full_url']
 expect(parsed_response['urls']).to be_include([short_url.attributes])
[short_url.attributes]
short_url.attributes
short_url.public_attributes
parsed_response['urls']
 expect(parsed_response['urls']).to be_include(short_url.attributes)
parsed_response['urls']
short_url.attributes
short_url
continue
short_url
shorts_url = ShortUrl.find(short_url)
short_url = ShortUrl.find(short_url)
continue
short_url
continue
short_url
continue
short_url_id
continue
short_url
short_url.update(title: "test")
short_url
continue
short_url
continue
short_url
short_url.update_title!
short_url
continue
short_url
short_urls
continue
short_urls
short_url
short_urls = short_url.update_title!
short_url
continue
ShortUrl.find(1163)
short_url
continue
short_url
continue
url.update(title: title)
    title = doc.css("title").text
doc = Nokogiri::HTML(open("#{url.full_url}"))
url = ShortUrl.find(short_url_id)
continue
short_url
continue
title
url
    url.update(title: title)
    title = doc.css("title").text
doc = Nokogiri::HTML(open("#{url.full_url}"))
 url = ShortUrl.find(short_url_id)
short_url_id
continue
short_url.title
continue
exit
parsed_response
parsed_response['errors']
exit
short_url
short_url.shorten_code
continue
["is not a valid url"].include?("is not a valid url")
["Full url is not a valid url"].include?("is not a valid url")
expect(short_url.errors[:full_url]).to be_include("is not a valid url")
short_url.errors[:full_url]
exit
short_url.errors["full_url"]
exit
short_url.errors["full_url"]
short_url.errors
continue
short_url.errors[:full_url]
short_url.valid?
short_url.errors
short_url.errors/valid?
exit
short_url.errors["base"]
short_url.errors
exit
exot
short_url.errors
short_url.errors.full_url
short_url.errors
exit
short_url.errors
short_url
exit
short_url.valid?
short_url.errors
 expect(short_url).to_not be_valid
short_url.errors[:full_url]
short_url.errors
continue
short_url
continue
ShortUrl.create(full_url: "https://www.google.com")
short_url
continue
params
url
continue
exit
get :show, params: { id: short_url.short_code }, format: :json
exit
exot
    docker-compose -f docker-compose-test.yml build
get :show, params: { id: short_url.short_code }, format: :json
exit
get :show, params: { id: short_url.short_code }, format: :json
exit
get :show, params: { id: short_url.short_code }, format: :json
continue
exit
parsed_response
continue
exit
parsed_response
continue
short_url
continue
exit
post :create, params: { full_url: "https://www.espn.com" }, format: :json
ShortUrl.last
parsed_response
continue
result
continue
